- "# Application Structure\n\n!!! info \"Prerequisites\"\n\n    - [LangGraph Server](./langgraph_server.md)\n\
  \    - [LangGraph Glossary](./low_level.md)\n\n## Overview\n\nA LangGraph application\
  \ consists of one or more graphs, a LangGraph API Configuration file (`langgraph.json`),\
  \ a file that specifies dependencies, and an optional .env file that specifies environment\
  \ variables. This guide shows a typical structure for a LangGraph application and\
  \ shows how the required information to deploy a LangGraph application using the\
  \ LangGraph Platform is specified.\n\n## Key Concepts\n\nTo deploy using the LangGraph\
  \ Platform, the following information should be provided:\n\n1. A [LangGraph API\
  \ Configuration file](#configuration-file) (`langgraph.json`) that specifies the\
  \ dependencies, graphs, environment variables to use for the application. 2. The\
  \ [graphs](#graphs) that implement the logic of the application. 3. A file that\
  \ specifies [dependencies](#dependencies) required to run the application. 4. [Environment\
  \ variable](#environment-variables) that are required for the application to run.\n\
  \n## File Structure\n\nBelow are examples of directory structures for Python and\
  \ JavaScript applications: === \"Python (requirements.txt)\"\n\n    ```plaintext\n\
  \    my-app/\n    \u251C\u2500\u2500 my_agent # all project code lies within here\n\
  \    \u2502   \u251C\u2500\u2500 utils # utilities for your graph\n    \u2502  \
  \ \u2502   \u251C\u2500\u2500 __init__.py\n    \u2502   \u2502   \u251C\u2500\u2500\
  \ tools.py # tools for your graph\n    \u2502   \u2502   \u251C\u2500\u2500 nodes.py\
  \ # node functions for you graph\n    \u2502   \u2502   \u2514\u2500\u2500 state.py\
  \ # state definition of your graph\n    \u2502   \u251C\u2500\u2500 __init__.py\n\
  \    \u2502   \u2514\u2500\u2500 agent.py # code for constructing your graph\n \
  \   \u251C\u2500\u2500 .env"
- "# environment variables\n    \u251C\u2500\u2500 requirements.txt # package dependencies\n\
  \    \u2514\u2500\u2500 langgraph.json # configuration file for LangGraph\n    ```\n\
  === \"Python (pyproject.toml)\"\n\n    ```plaintext\n    my-app/\n    \u251C\u2500\
  \u2500 my_agent # all project code lies within here\n    \u2502   \u251C\u2500\u2500\
  \ utils # utilities for your graph\n    \u2502   \u2502   \u251C\u2500\u2500 __init__.py\n\
  \    \u2502   \u2502   \u251C\u2500\u2500 tools.py # tools for your graph\n    \u2502\
  \   \u2502   \u251C\u2500\u2500 nodes.py # node functions for you graph\n    \u2502\
  \   \u2502   \u2514\u2500\u2500 state.py # state definition of your graph\n    \u2502\
  \   \u251C\u2500\u2500 __init__.py\n    \u2502   \u2514\u2500\u2500 agent.py # code\
  \ for constructing your graph\n    \u251C\u2500\u2500 .env# environment variables\n\
  \    \u251C\u2500\u2500 langgraph.json  # configuration file for LangGraph\n   \
  \ \u2514\u2500\u2500 pyproject.toml # dependencies for your project\n    ```\n\n\
  === \"JS (package.json)\"\n\n    ```plaintext\n    my-app/\n    \u251C\u2500\u2500\
  \ src # all project code lies within here\n    \u2502   \u251C\u2500\u2500 utils\
  \ # optional utilities for your graph\n    \u2502   \u2502   \u251C\u2500\u2500\
  \ tools.ts # tools for your graph\n    \u2502   \u2502   \u251C\u2500\u2500 nodes.ts\
  \ # node functions for you graph\n    \u2502   \u2502   \u2514\u2500\u2500 state.ts\
  \ # state definition of your graph\n    \u2502   \u2514\u2500\u2500 agent.ts # code\
  \ for constructing your graph\n    \u251C\u2500\u2500 package.json # package dependencies\n\
  \    \u251C\u2500\u2500 .env # environment variables\n    \u2514\u2500\u2500 langgraph.json\
  \ # configuration file for LangGraph\n    ```\n\n!!! note\n\n    The directory structure\
  \ of a LangGraph application can vary depending on the programming language and\
  \ the package manager used.\n\n\n## Configuration File\n\nThe `langgraph.json` file\
  \ is a JSON file that specifies the dependencies, graphs, environment variables,\
  \ and other settings required to deploy a LangGraph application."
- "The file supports specification of the following information:\n\n\n| Key      \
  \          | Description                                                       \
  \                                                                              \
  \                                                                              \
  \                                                                              \
  \                                                                              \
  \                                                                              \
  \                                                                     |\n|--------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n\
  | `dependencies`     | **Required**.Array of dependencies for LangGraph API server.\
  \ Dependencies can be one of the following: (1) `\".\"`, which will look for local\
  \ Python packages, (2) `pyproject.toml`, `setup.py` or `requirements.txt` in the\
  \ app directory `\"./local_package\"`, or (3) a package name. |\n| `graphs`    \
  \       | **Required**. Mapping from graph ID to path where the compiled graph or\
  \ a function that makes a graph is defined. Example: <ul><li>`./your_package/your_file.py:variable`,\
  \ where `variable` is an instance of `langgraph.graph.state. CompiledStateGraph`</li><li>`./your_package/your_file.py:make_graph`,\
  \ where `make_graph` is a function that takes a config dictionary (`langchain_core.runnables.\
  \ RunnableConfig`) and creates an instance of `langgraph.graph.state. StateGraph`\
  \ / `langgraph.graph.state.CompiledStateGraph`.</li></ul> |\n| `env`           \
  \   | Path to `.env` file or a mapping from environment variable to its value. |\n\
  | `python_version`   | `3.11` or `3.12`. Defaults to `3.11`. |\n| `pip_config_file`\
  \  | Path to `pip` config file. |\n| `dockerfile_lines` | Array of additional lines\
  \ to add to Dockerfile following the import from parent image. |\n!!! tip\n\n  \
  \  The LangGraph CLI defaults to using the configuration file **langgraph.json**\
  \ in the current directory.\n\n\n### Examples\n\n=== \"Python\"\n\n    * The dependencies\
  \ involve a custom local package and the `langchain_openai` package. * A single\
  \ graph will be loaded from the file `./your_package/your_file.py` with the variable\
  \ `variable`.\n    * The environment variables are loaded from the `.env` file."
- "```json\n    {\n        \"dependencies\": [\n            \"langchain_openai\",\n\
  \            \"./your_package\"\n        ],\n        \"graphs\": {\n           \
  \ \"my_agent\": \"./your_package/your_file.py:agent\"\n        },\n        \"env\"\
  : \"./.env\"\n    }\n    ```\n\n=== \"JavaScript\"\n\n    *The dependencies will\
  \ be loaded from a dependency file in the local directory (e.g., `package.json`).\
  \ * A single graph will be loaded from the file `./your_package/your_file.js` with\
  \ the function `agent`.\n    * The environment variable `OPENAI_API_KEY` is set\
  \ inline. ```json\n    {\n        \"dependencies\": [\n            \".\"\n     \
  \   ],\n        \"graphs\": {\n            \"my_agent\": \"./your_package/your_file.js:agent\"\
  \n        },\n        \"env\": {\n            \"OPENAI_API_KEY\": \"secret-key\"\
  \n        }\n    }\n    ```\n\n## Dependencies\n\nA LangGraph application may depend\
  \ on other Python packages or JavaScript libraries (depending on the programming\
  \ language in which the application is written). You will generally need to specify\
  \ the following information for dependencies to be set up correctly:\n\n1. A file\
  \ in the directory that specifies the dependencies (e.g., `requirements.txt`, `pyproject.toml`,\
  \ or `package.json`). 2. A `dependencies` key in the [LangGraph configuration file](#configuration-file)\
  \ that specifies the dependencies required to run the LangGraph application. 3.\
  \ Any additional binaries or system libraries can be specified using `dockerfile_lines`\
  \ key in the [LangGraph configuration file](#configuration-file). ## Graphs\n\n\
  Use the `graphs` key in the [LangGraph configuration file](#configuration-file)\
  \ to specify which graphs will be available in the deployed LangGraph application.\
  \ You can specify one or more graphs in the configuration file."
- 'Each graph is identified by a name (which should be unique) and a path for either:
  (1) the compiled graph or (2) a function that makes a graph is defined.


  ## Environment VariablesIf you''re working with a deployed LangGraph application
  locally, you can configure environment variables in the `env` key of the [LangGraph
  configuration file](#configuration-file). For a production deployment, you will
  typically want to configure the environment variables in the deployment environment.
  ## Related


  Please see the following resources for more information:


  - How-to guides for [Application Structure](../how-tos/index.md#application-structure).'
